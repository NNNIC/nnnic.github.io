<?php
$searchData[0] = array(
	title=>'ビジュアルプログラミングツール StateGo',
	contents=>'ダウンロード 利用ガイド EnglishStateGoとはStataGoは【処理フローの設計】と【プログラム実装】の両方を行う、あらゆるプログラミング言語に対応可能なビジュアルプログラミングツールです。StateGoはプログラミングの全てをカバーする完全なビジュアルプログラミングではありません。従来のプログラミングと連携しながらプログラミングするツールです。StateGoは極めてシンプルなソースコードへの変換を行います。それ故、ビジュアルプログラミングと従来のテキストによるプログラミングの両方の長所を使い開発を進めることが出来ます。【初心者向けのビジュアルプログラミングでは困難な複雑なロジック】や、【専門分野でしか利用できなかったビジュアルプログラミング】を、従来のテキストと共存できるビジュアルプログラミングだからこそ実現できるのです。StateGoは、ビジュアルで処理の流れを設計し、同時に実装していく新しい形のプログラミング環境を提供します。  ダウンロード ベータ１０  チュートリアル  利用ガイド※以下は、StateGoをかみ砕いての説明になります。処理の流れを設計するStateGoは、『処理の流れ』を設計するツールです。フローチャートと同じように処理の過程を一ステップずつ記述します。そのままプログラムする処理用のボックスをステートと呼びます。ステートの中にプログラムを記述します。変換するステートに格納されたプログラムはテンプレートにより再配置されて、実行可能なプログラムに変更されます。あらゆるプログラミング言語に対応テンプレートを変更することであらゆるプログラミング言語への適用を可能にします。StateGoにより、ビジュアルプログラミングが可能になったプログラミング言語 :Typescript(Anguler), Bash, C, C++, C#, C#(Unity), VBA(Excel), Javascript, Python, Rust, ティラノスクリプト, Visaul Basic, Win-bat, Delphi, Swift, PHP',
	permalink=>'./index.html'
);
$searchData[1] = array(
	title=>'最新バージョンのダウンロード',
	contents=>'最新バージョンについてStateGoの最新バージョンはベータ１０です。期間及び機能制限等は一切行っておりません。無料でフル機能を利用することが出来ます。機能追加が先行しており、説明が足りない状態になっています。これは、本業のゲームプロジェクトでの利用を優先させている事情によるものです。どうかご了承下さい。今回ホームページ作成ソフトの導入でWEB作成環境が各段と改善しております。そのため、説明追加のスピードも上げていく予定です。実行環境    Windows 102020/6/28 Beta10 Version 0.65.5617Beta10 ダウンロードインストールについてBeta 10 リリースノートコピーコレクションステートの再利用が簡単にできるようになりました。これによって、作業効率を各段と向上することが出来ます。詳しくはこちらをご覧ください。リセット追加ファイルメニューにリセットを追加しました。 リセットすると STARTとENDだけの状態となります。ソースエディタ設定の改善Visual Studio 2015, 2017, 2019, Code への規定のコマンドを自動入力できるようにしました。言語とプラットフォームをIDとしてPCに記録されるため、複数のStateGoのソースエディタを一斉に変更することが出来ます。また、Visual StudioからStateGoを呼び出すことも出来ます。詳しくは以下を参照下さい。- Visual Studio Codeとの連携- Visual Studio 2015, 2017, 2019との連携新規ステート生成時のコメント追加可否オプションデフォルトでは、新規ステート作成時に規定のコメントが追加されます。このオプションでこのコメント追加を止めることが出来ます。コメントが煩わしい場合に利用してください。ウインドウリストの表示場所移動実行中の全StateGoの一覧を表示し、クリックで移動することが出来ます。これまでメニューバーで表示されていたのを左パネル中央下に常時表示するようにしました。これにより、他のStateGoへの移動が便利になります。履歴BETA-9をリリースしました (20/4/25)BETA-8をリリースしました (20/1/25)BETA-7をリリースしました (19/11/28)BETA-6をリリースしました (19/10/12)BETA-5をリリースしました (19/8/13)BETA-4をリリースしました (19/7/15)BETA-3をリリースしました (19/6/2)BETA-2をリリースしました (19/5/5)BETA-1をリリースしました (19/4/16)',
	permalink=>'./entry2.html'
);
$searchData[2] = array(
	title=>'利用ガイド',
	contents=>'StateGoは、本業のゲーム開発で利用されています。しかし、StateGo自体の開発に掛ける時間は週末だけと大変限られた状態です。そのため、機能追加や修正が先行しており、その内容に関するドキュメント追加や過去記事の修正が間に合っていない状況です。特に、途中で用意したリファレンスは現状と合致しない部分が多少でており、大変申し訳なく思っています。このような状態も、Webツールの新調によりドキュメント作業のスピードを上げて解消していく予定です。今回のStateGoベータ１０リリースにあたり、StateGoユーザの方々が【迷わず習得できるようにするためにはどうすればよいのか？】を考え、少々の説明と関連ドキュメントのリンクを纏めてみました。どうぞご利用下さい。初めての方にチュートリアルは、UnityとRustが用意されています。他の言語もおおよそ同じことができるので、一読をお奨めします。各言語用にサンプルが準備されています。 Guthubをご覧ください。ティラノスクリプトについては、Qiitaの記事も参考下さい。以下、初心者向けの記事へのリンク集になります。【リファレンス内】StateGoの基本操作 リファレンス作成後の追加機能については対応していません。【リファレンス内】利用ガイド利用ガイドは、StateGo内の"?"マークより参照されています。リファレンス作成後の追加機能については対応していません。ステートマシンについてテンプレートと変換についてソース出力についてステートではないステート、組込みとコメント使いこなすためにコピーと継承LOOPとGOSUB理解を強力サポート、サムネイルとリンクVisual Studio Codeとの連携Visual Studio 2015,2017,2019との連携コピーコレクションもっと知りたくなった時に【Qiita】ゲーム業界の宿命的問題にアプローチする～汎用ビジュアルプログラミングツール開発のバックグランド仕様関連【リファレンス内】ステート【リファレンス内】アイテム名（項目名）【リファレンス内】関数テンプレート【リファレンス内】マクロ【リファレンス内】アウトプット【リファレンス内】SETTING操作【リファレンス内】マウス操作一覧【リファレンス内】ショートカット一覧',
	permalink=>'./entry25.html'
);
$searchData[3] = array(
	title=>'解説',
	contents=>'',
	permalink=>'./category3/index.html'
);
$searchData[4] = array(
	title=>'インストールの注意点',
	contents=>'インスト―ル時のワーニングついてインストールの際、ワーニング表示される場合があります。その際は、【詳細情報】をクリックし、次の画面で【実行】をクリックしてください。',
	permalink=>'./category3/entry7.html'
);
$searchData[5] = array(
	title=>'ステートマシンについて',
	contents=>'ステートマシンとはStateGoは、その名前の由来となったステートマシンを生成するツールです。ステートマシンは状態機械と訳され、複数の状態とそれらを結ぶ複数の遷移の組み合わせから成り立ち、機械の名のとおり、設計どおり正確に動作します。そのステートマシンを視覚的に表したものを【状態遷移図】と呼びます。StateGoは【状態遷移図】を設計するツールです。状態遷移図　＝（イコール）フローチャート状態遷移図に馴染みのない方も多いと思います。時系列で動作することや条件で分岐する点が同じなのでフローチャートと捉えることも可能です。SteteGoのステートStateGoのステートは、ステート名・コメント・処理部・分岐部から成り立っています。分岐部からは各分岐に対応するステートへの遷移を示すの矢印線が引かれます。分岐部がない順処理の場合は、処理部の後方より矢印線が引かれます。処理部と分岐部には、プログラムそのものを書き入れます。プログラムは、プログラム言語用及びプラットフォーム用に用意されたテンプレートにより再配置され、最終的なプログラムソースに変換されます。',
	permalink=>'./category3/entry9.html'
);
$searchData[6] = array(
	title=>'テンプレートと変換について',
	contents=>'ステートとテンプレートSteteGoは『状態遷移図』を設計するツールです。状態をあらわすステートと呼ばれるノードに直接プログラムコードを書き込みます。書き込まれたプログラムコードは、テンプレートを使い、再配置され、ソースコードに変換されます。ステートは内部にテーブルを持ち、プログラムの各要素ごとにプログラムコードを書くようになっています。プログラム要素は以下の通りです。　※説明のため簡略化しています。１．ステート名２．初期化処理３．更新処理４．待機条件５．分岐処理テンプレートは、これらの要素を再配置します。例えばC＃の場合以下のテンプレートが用意されます。void [[ステート名]](bool bFirst) // 分岐されるまで何度も呼ばれる{　　if (bFirst) //１回trueとなる。　　{　　　　[[初期化処理]]　　}　　[[更新処理]]　　 if ([[待機条件]]) return;　// 条件がtrueであれば再びこの関数が呼ばれる。　　[[分岐処理]]}StateGoは、ステートのテーブルの各項目のプログラムをテンプレートに当てはめて再配置します。上記のテンプレートでは初期化処理がない場合や待機条件がない場合に文法エラーが発生します。しかし、テンプレートでは回避する方法が用意されています。',
	permalink=>'./category3/entry10.html'
);
$searchData[7] = array(
	title=>'ソース出力について',
	contents=>'ソースへの出力についてStateGoは『状態遷移図』を設計するツールです。状態を表すステートと呼ばれるノードのテーブルに直接プログラムを書込みます。書き込まれたプログラムは、テンプレートにより再配置されて、実行可能なソースコードになります。出力先となるソースコードに変換内容を挿入する場所を用意します。例えば、C#の場合、以下のようになります。using System;using System.IO;::  自由にプログラミング:public class HogeControl {　 :　 :　　自由にプログラミング　 :　　 // [STATEGO OUTPUT START] indent(4) $/$　　　　挿入開始マーク　　ここに変換されたソースコードが挿入されます。　　// [STATEGO OUTPUT END]　　　　挿入終了マーク　 :　 :　　自由にプログラミング　 :}テンプレートによって変換された各ステートが、【挿入開始マーク】と【挿入終了マーク】の間に挿入されます。つまりは、それ以外は自由にプログラミングが可能なのです。シンプルな使い方シンプルな使い方として、ステート内のプログラムは関数名だけにして、その関数の実装を挿入場所以外で行えばよいのです。StateGoの変換はステートの内容をテンプレートに添って再配置して挿入場所に入れているだけだから、StateGo内で使用された関数・変数を、挿入場所以外で定義すればよいというわけです。',
	permalink=>'./category3/entry11.html'
);
$searchData[8] = array(
	title=>'ステートではないステート、組込みとコメント',
	contents=>'本来のステートは、処理を伴うものです。しかし、StateGoでは、組込みステートとコメントステートがあります。StateGoの開発の最中に必然性とアイデアから生まれたステートです。コメントステートコメントステートは、コメントを格納するステートです。ですが、別の使い方があります。使用中のステートをコメントアウトしたいとき、ステートメニューから種別の変更でコメントステートに変更できます。戻すことも可能です。組込みステート組込みステートは、描かれたプログラムを再配置機能を使わずに出力させるものです。変数、関数、列挙子等々に使うことが出来ます。通常のステートと同様にコピーができますので、他のステートマシンに関数をコピーするとかで便利です。',
	permalink=>'./category3/entry15.html'
);
$searchData[9] = array(
	title=>'コピーと継承',
	contents=>'StateGoのコピーStateGoは、ステートを単独でも、複数でもコピーが可能です。StateGoどうしでもコピーが可能です。継承コピーと似た機能に継承があります。あるステートと同じものを作成したいけど、中身を若干かえたい場合に使用します。ステートのbasestateに継承元になるステート名を入れると、中身がなくても継承元と同じになります。変更したいアイテムだけを編集することで、少し変化したステートを作ることがでます。変更しなかたった項目は継承元と同じになるので、仮に継承元が変化した場合に、継承先の中身も変わります。※コピーと継承を上手に使うことで作業効率のさらなる向上を望むことが出来ます。',
	permalink=>'./category3/entry13.html'
);
$searchData[10] = array(
	title=>'LOOPとGOSUB',
	contents=>'LOOPステートを繰り返すための機能としてLOOPがあります。ステート作成にて、LOOPを選択することで作成されます。Gosubにてサブルーチンを呼出します。LOOPには、初期化、条件、再初期化を指定して利用します。ステートを使うほどもない繰り返しは、通常のステートの中でプログラムで作り込みができます。ループを作る必要性を確認して使用しましょう。GOSUB何度も同じステートを呼び出すためにあるがのGOSUBです。サブルーチンは専用の開始と終了ステートがあります。',
	permalink=>'./category3/entry17.html'
);
$searchData[11] = array(
	title=>'理解を強力サポート、サムネイルとリンク',
	contents=>'バグ対応や機能追加のため、他人または自分のプログラムを読むことは常日常の作業です。プログラムが一体どんなものなのか、中のコードを一つ一つを読むことはせずに、ファイル名、関数名、コメントからその概要を類推することから始まります。もしこの時に、概要を示すイメージがあれば大変理解の助けになりますし、参考となった資料へのリンクがあるとより一層理解を深めることが出来、バグ対応や機能追加といった作業を効率よく行うことが出来ます。プログラムの効率よい理解を促進するため、StateGoはステート内にサムネイルとリンクを格納する機能が用意されています。サムネイルステートのアイテム編集にて、thumbnailを選ぶとビットマップ編集用のダイアログが表示されます。画像ファイルからまたは、Snipping Tool等からのカット＆ペーストで画像を入力します。リンクステートのアイテム編集にて、stateを選択すると、ステートダイアログが表示されます。参照にリンクを入力します。参照がStateGoファイルの場合、ファイル名を入力します。StateGo拡張子(.psgg)を省略することが出来ます。リンクが設定時、ステート名に下線が追加されます。リンクは、ステートのコンテキストメニューより選択して、参照先を表示することが出来ます。StateGoファイルが指定されている場合、フォルダ近辺を検索してオープンされます。&nbsp;Javascript 15パズルサンプルにてリンク事例を確認することができます。 ',
	permalink=>'./category3/entry43.html'
);
$searchData[12] = array(
	title=>'Visual Studio Codeとの連携',
	contents=>'はじめにVisual Studio Code（以下 VS CODEと表記） と StateGoを連携させることで、作業を大変楽にすることが出来ます。StateGoにVS CODEを登録するメニューバーの【ツール】→【ソースエディタ設定】にて、ソースエディタ設定ダイアログを表示します。ソースエディタの指定は、簡単に入力する方法が用意されています。エディタ候補を使用するまずは、エディタ候補に "Visual Studi Code"が表示されることを確認下さい。デフォルトにてVS CODEをインストールしていれば、表示されるはずです。もし、デフォルト以外の場所にインストールした場合は環境変数VSCodeExeにCode.exeのフルパスを指定して下さい。指定後 StateGOを起動し、エディタ候補に表示されることを確認下さい。環境変数の反映は、PCの再起動が必要になる場合もあります。Visual Studio CODEが表示された状態で【入力】ボタンを押してください。コマンド欄に呼出し用のコマンドが表示されます。【SAVE & CLOSE】ボタンを押して、完了です。コマンドを直接入力するコマンドの入力欄に直接コマンドを入力することが出来ます。以下の引数を利用することが出来ます。%1 - ファイル名%2 - 行番号履歴を利用する過去に使用したコマンドは履歴に表示されます。それから、入力することが出来ます。VS CODEにStateGoを登録する拡張機能 Open in External Editorを利用します。拡張機能でインストール後、1. [ファイル]→[ユーザ設定]→[設定] 　　→　設定画面が開く2. 設定の検索にて "open in external editor" を入力　　→ 　検索結果が表示3. Alt-editor ... "settings.jsonで編集"を選択 　　→　settings.jsonが表示4.  下図のように２行追加する。StateGoのインストールパスが異なる場合は、合わせて変更してください。参考　https://qiita.com/standard-software/items/785e3c27865a8e8d0b92使い方StateGoとVS CODEの双方に起動用の設定をすると以下の事が可能になります。ステートのソース表示選択中のステートのソースをVS CODEで確認することが出来ます。選択中のステートのプログラム部分をエディタで見たい！↓以下のいづれかの方法ステートのコンテキストメニューより、【ソースへ】を選択ユーティリティパネル（画面左下）の【ソース】ボタンを押すステートを選択した状態で コントロールキーを押しながら J キーを押す↓VS CODEが開き、選択中のステートの該当行にカーソルが表示されるVS CODE表示中のソースに対応するStateGoを開くVS CODEで表示中のファイルが StateGoの出力ファイルであれば、変換元であるStatGoをVS CODEから呼び出して確認することが出来ます。VS CODEで表示中のファイルのSteteGoが見たい！↓Altキー と Shift キーを押しながら E キーを押す。↓StateGoが起動し、変換元のStateGOファイルを開くステートのアイテム編集でVS CODEを利用するStateGoはステートに直接プログラムを入力します。その際に、VS CODE上で入力することが出来ます。出力ファイルの該当箇所にマークがつけられ、その間を編集して反映することが出来ます。そのため、単語の補完機能等を使って楽に入力することが可能です。ステートアイテム編集の値入力でVS CODEを利用したい！↓アイテム編集ダイアログの "外部エディタへ"をクリック↓VS CODEが起動し、編集箇所が表示される。↓編集してセーブ↓アイテム編集ダイアログへ反映',
	permalink=>'./category3/entry16.html'
);
$searchData[13] = array(
	title=>'Visual Studio 2015,2017,2019との連携',
	contents=>'はじめにVisual Studio 2015、2017、または、2019（以下 VS201Xと表記） と StateGoを連携させることで、作業を大変楽にすることが出来ます。StateGoにVS201Xを登録するメニューバーの【ツール】→【ソースエディタ設定】にて、ソースエディタ設定ダイアログを表示します。ソースエディタの指定は、簡単に入力する方法が用意されています。エディタ候補を使用するまずは、エディタ候補に "Visual Studi 2015"（2017または2019）が表示されることを確認下さい。デフォルトにてVS201Xをインストールしていれば、表示されるはずです。もし、デフォルト以外の場所にインストールした場合はそれぞれの環境変数にVS201Xの実行EXE(devenv.exe)のフルパスを指定して下さい。VS2015Exe -- Visual Studio 2015用VS2017Exe -- Visual Studio 2017用VS2019Exe -- Visual Studio 2019用指定後 StateGOを起動し、エディタ候補に表示されることを確認下さい。環境変数の反映は、PCの再起動が必要になる場合もあります。Visual Studio 201Xが表示された状態で【入力】ボタンを押してください。コマンド欄に呼出し用のコマンドが表示されます。【SAVE & CLOSE】ボタンを押して、完了です。コマンドを直接入力するコマンドの入力欄に直接コマンドを入力することが出来ます。以下の引数を利用することが出来ます。%1 - ファイル名%2 - 行番号%3 - ソリューションファイル名履歴を利用する過去に使用したコマンドは履歴に表示されます。それから、入力することが出来ます。VS201XにStateGoを登録するVisual Studio 201Xに外部ツールとして登録します。1. メニューバーの【ツール】→【外部ツール】　　→　外部ツールダイアログが表示2. 以下の内容で登録します。タイトル　StateGo(&5)コマンド　C:\Program Files (x86)\PSGG\StateGo.exe引数　　-oc $(ItemPath)SteteGoのインストールパスが異なる場合は、合わせて変更してください。3. OKボタンを押すこれで登録完了です。使い方StateGoとVS CODEの双方に起動用の設定をすると以下の事が可能になります。ステートのソース表示選択中のステートのソースをVS CODEで確認することが出来ます。選択中のステートのプログラム部分をエディタで見たい！↓以下のいづれかの方法ステートのコンテキストメニューより、【ソースへ】を選択ユーティリティパネル（画面左下）の【ソースへ】ボタンを押すステートを選択した状態で コントロールキーを押しながら J キーを押す↓Visual Studio 201Xが開き、選択中のステートの該当行にカーソルが表示されるVS201X表示中のソースに対応するStateGoを開くVisual Studio 201Xで表示中のファイルが StateGoの出力ファイルであれば、変換元であるStatGoをVS CODEから呼び出して確認することが出来ます。VS201Xで表示中のファイルのSteteGoが見たい！↓Altキーを押しながら T キーを押し、５キーを押す↓StateGoが起動し、変換元のStateGOファイルを開くステートのアイテム編集でVS201Xを利用するStateGoはステートに直接プログラムを入力します。その際に、VS201X上で入力することが出来ます。出力ファイルの該当箇所にマークがつけられ、その間を編集して反映することが出来ます。そのため、単語の補完機能等を使って楽に入力することが可能です。ステートアイテム編集の値入力でVS201Xを利用したい！↓アイテム編集ダイアログの "外部エディタへ"をクリック↓VS201Xが起動し、編集箇所が表示される。↓編集してセーブ↓アイテム編集ダイアログへ反映',
	permalink=>'./category3/entry12.html'
);
$searchData[14] = array(
	title=>'コピーコレクション',
	contents=>'自動でコピーした内容を記憶し、再利用するための機能です。使うためには、コピー内容を記録する場所を指定する必要があります。作業フォルダの指定複数のStateGoで共通の作業フォルダを利用できるようにするため、作業フォルダはソースと同じフォルダ、または、上方のフォルダに配置します。コピーコレクションダイアログを開くメニューバー右端にある "CC"をクリックするとコピーコレクションダイアログが表示されます。コピーコレクションの使い方コピーした内容は、自動でキャッシュに追加されます。キャッシュから探してドラッグ＆ドロップで利用できます。また、コレクションへの移動が可能で、そちらからもドラッグ＆ドロップで利用が可能です。',
	permalink=>'./category3/entry14.html'
);
$searchData[15] = array(
	title=>'チュートリアル',
	contents=>'StateGoは、様々なプログラミング言語で利用が可能です。今話題の言語 Rustと超強力メジャーなゲーム開発環境Unity上でのStateGoチュートリアルを用意しました。・ Rust チュートリアル・ Unity チュートリアル',
	permalink=>'./category2/index.html'
);
$searchData[16] = array(
	title=>'Rust',
	contents=>'Rustは、C言語およびC++言語に代わるローレベルの言語で、実行パフォーマンスと安全性の両立を目指すプログラミング言語です。特徴はセキュリティ面の強化にあります。仕様は、不変定数のデフォルト化やイコール処理における実体の移動など、これまでのC言語系とは大きく異なる内容となっています。さらには、大変強力な静的検査機能がコンパイラに追加されています。その検査は、セキュリティ面の検査は当然として、さらには変数名の命名則までも対象となっている…これまでにない言語です。多くの企業が採用を宣言しており、今期待の言語です。',
	permalink=>'./category2/category4/index.html'
);
$searchData[17] = array(
	title=>'新規作成からサンプル実行まで',
	contents=>'はじめにRust用の新規ステートマシンを作成した時のサンプルを動かす方法を紹介します。サンプルでは、LoopやGosub機能が使われています。StatGoを初めて使う方にはちょっと難しい内容となっています。そういう方は、環境整備と実行確認のみに使用して下さい。Rustサンプル用の作業フォルダの作成あらかじめ、Rustの環境をセットアップしてださい。コマンドラインにて テスト用 Hogeパッケージを作成します。> cargo new hogemain.rsが作成されます。StateGoの新規作成１．StateGoを起動２．スタートダイアログの新規作成ボタンを押す３．ステートキットからRustを選択４．ステートマシン名をhoge_controlに決定　　rustの命名則に従うためスネル形式にします５．main.rsと同じフォルダを指定５．生成ボタンを押す以下の２つのファイルが生成されます。hoge_control.psgg --- StateGoデータファイルhoge_control.rs    --- 出力用のRustソースファイル生成時のサンプルを動かす生成時のサンプルを動かします。(このサンプルはループとサブルーチン呼出しのサンプルです。)1. Cargo.tomlに以下を書き足します。※以下の内容はヘルプパネルにも記載されています。[dependencies]rand = "0.6"2. main.rsを以下のように編集します※以下の内容はヘルプパネルにも記載されています。#[allow(dead_code)]mod hoge_control;use hoge_control::hoge_control::*;    fn main() {　　let mut hc = HogeControl::new();　　hc.run();}3. 実行します。コマンドラインにて以下を入力します。> cargo runビデオ一連の操作をキャプチャしたものです。サンプル動作説明※高度な内容が含まれています。理解が難しい場合、次の"Step-by-step"チュートリアルにお進みください。サンプルは、GOSUBとLOOPを使用しています。GOUSBは、サブルーチンを呼び出します。サブルーチンは、サブルーチン開始用のステートとリターン用のステートから成り立ちます。LOOPは、初期値、条件、再初期化を指定してサブルーチンを呼出します。サンプルのフローについて１．　ステート【0001】　    StateGo is runningの表示２．  ステート【LOP000】  SBS001のサブルーチンを10回呼出し３．  ステート【GSB001】  SBS000のサブルーチン呼出し(1回)４．  ステート【0002】      ステート内で１０回Update待ち５．  ステート【0003】      乱数を発生させ、奇数偶数で分岐組込部分右下に、乱数発生の関数を組込ステートで定義してあります。【E_0000】 rand関数の実装コメント右上に、本サンプルの説明がコメントで定義していあります。【C_0000】 説明',
	permalink=>'./category2/category4/entry18.html'
);
$searchData[18] = array(
	title=>'&quot;Hello World&quot; Step-by-step チュートリアル',
	contents=>'はじめにStateGoを理解して頂くために一ステップずつ解説するチュートリアルです。定番の『Hello Word』まずは、定番のHello Worldを表示するステートマシンを作成します。準備先の記事【サンプルの実行】を実践し、Rustのセットアップ及びStateGoの初期サンプル実行に問題がないかを確認下さい。リセットhoge_control.psggをダブルクリックして、StateGoを起動しましょう。何もないところから覚えて頂きたいので、メニューバーの[ファイル]から[リセット]を選択して、STARTとENDだけの状態にします。ステート作成STARTステートとENDステートの真ん中あたりで、クリックしてメニューを表示させます。[新規作成]→[ステート]→[汎用(デフォルト)]を選択します。ステートが作成されます。ステート名とコメントステート上でクリックしてメニューを表示します。アイテム編集を選択します。このステートの定義内容がテーブルで表示されます。ステート名を入力したいので、２列目の[ステート]をクリックします。このステートに相応しそうなステート名　[PRINT_HELLO]を入力します。何がしたいのか詳細をコメントに入力します。 "定番のHello Worldを表示"プログラム入力一回だけ表示して、すぐに次のステートに遷移するので、[update]列にプログラムを入力しましょう。println!("Hello, World!");矢印の変更STARTステートの左から出てる赤丸をドラッグして、PRINT_HELLOステートの右端の緑丸にドロップします。PRINT_HELLOステートからENDステートへ矢印を追加します。プログラムの確認PRINT_HELLOステートをクリックしてみてください。左のソースパネルに変換結果が表示されます。変換左下の [保存と変換]ボタンを押すと変換結果が hoge_control.rsに出力されます。実行次のコマンドで実行してみましょう。> cargo runサンプルの rand::Rngが警告となるので、削除して実行してください。まとめここでは以下のことが習得できました。１．ステートを作成する。２．ステート名とコメントを入力する３．プログラムを入力する４．矢印でつなげる５．変換する６．実行する以上',
	permalink=>'./category2/category4/entry20.html'
);
$searchData[19] = array(
	title=>'&quot;分岐サンプル&quot; Step-by-step チュートリアル',
	contents=>'はじめにStateGoを理解して頂くために一ステップずつ解説するチュートリアルです。分岐処理を学習します。プログラム仕様これから作るプログラムの仕様は以下のとおりです。ランダムで１から１０の数字を一つ選択１の場合は"1st"２の場合は"2nd"３の場合は "3rd"４以降は "4th"と表現する。最終的に、 "You are XX." XXの部分に上記で作成した文字列が入る準備このチュートリアルは"Hello World" step-by-step チュートリアルからの続きになります。準備が出来てない場合は、最初の記事から実践して下さい。乱数の取得汎用の新規ステートを作成します。GET_RANDというステート名を与えます。乱数を保持して、以降のステートで使うため、メンバ変数 "m_val" を定義します。Rustでのメンバ変数は、宣言と初期化が別々に行う必要があります。既に用意したテーブルの memberに宣言、member_initに初期化用の式を入力します。[member]m_val : i32,[member_init]m_val : 0,乱数関数 rand( a, b )を後から定義することとして、[init]に式を入力します。[update]self.m_val = rand(1,10);分岐の作成取得した数字で分岐する必要があります。GET_RANDステートをクリックするとメニューが表示されます。分岐作成を選択します。分岐エディタが表示されます。ダイアログの空欄でクリックしてメニューを表示して、新規の分岐を作成します。分岐条件は、プログラム式を入力します。分岐ダイアログをOKで閉じるとステートに分岐ボックスが追加されます。分岐別の処理分岐それぞれ用の処理を追加する。変換保存と変換ボタンを押し、hoge_control.rsに出力します。rand関数の実装rand関数が実装されていなため、このまま実行はできません。hoge_control.rsをエディタで開き、rand関数を実装します。ただし、StateGoの挿入部の中に実装すると変換時に削除されます。挿入マーカ―外で実装します。※組込関数で実装することも可能ですが、変換結果の挿入部以外で定義できることを習得することを目的とします。fn rand(a: i32, b:  i32) -> i32 {　　let mut rng = rand::thread_rng();　　let n = b - a;　　return a + rng.gen_range(0,n+1);}使用するパッケージを指定します。use rand::Rng;実行以下のコマンドを何度か実行して、正しくプログラムされていることを確認してください。> cargo runアーカイブpsgg-rust-sample/tutorialまとめここでは以下のことが習得できました。1. メンバ変数の定義と初期化2. 分岐方法3. ファイルを変更しての実装方法以上',
	permalink=>'./category2/category4/entry19.html'
);
$searchData[20] = array(
	title=>'Unity',
	contents=>'Unityはマルチプラットフォーム対応の超メジャーなゲーム開発環境です。敷居の低さから多くのゲーム開発で利用されています。Unity開発で使われる言語はC#です。他の言語もありましたが廃止されるようです。Unity上でStateGoを使ったチュートリアルを行います。',
	permalink=>'./category2/category5/index.html'
);
$searchData[21] = array(
	title=>'新規作成からサンプル実行まで',
	contents=>'はじめにUnity用の新規ステートマシンを作成した時のサンプルを動かす方法を紹介します。サンプルでは、LoopやGosub機能が使われています。StatGoを初めて使う方にはちょっと難しい内容となっています。そういう方は、環境整備と実行確認のみに使用して下さい。新規Unityプロジェクトの作成最初に新規のUnityプロジェクトを作成します。Unityプロジェクト直下にAssetsフォルダが作成されます。そこにStateGoのファイルを作成していきます。StateGoの新規作成１．StateGoを起動し、スタートダイアログの【新規ステートマシンの作成】ボタンを押し、新規作成ダイアログを開きます。２．スタートキット選択より、【C# Unity スタートキット】を選択します。３． ステートマシン名を　例として TestControlとします。４．ソース用フォルダパスに UniyプロジェクトのAssetsフォルダを指定します。5. 【作成】ボタンを押すStateGoの編集画面が開きます。画面上にはサンプルが表示されます。Assetsフォルダ直下に TestControl.cs と TestControl.psgg(StateGoデータファイル)が作成されます。サンプルのコンバート動作を確認するため、一度変換させましょう。ユーティリティパネル(画面左下)の【保存と変換】ボタンを押します。TestControl.csに変換結果が出力されます。サンプルコードのアタッチUnityのヒエラルキーパネルのコンテキストメニューにて Create Emptyを選択し、空のゲームオブジェクトを作成します。ゲームオブジェクト名をtestとします。プロジェクトウインドウの TestContro.csをドラッグして、testゲームオブジェクトに追加します。これで、実行前の作業は終了です。サンプルの実行本サンプルは、ログを出力するだけのものです。Unity の Playボタンを押すと、コンソールに結果が表示されます。サンプルフローの説明１．S_GOSUB - "This is A Subroutine"をコンソールに出力するサブルーチンを呼出します。２．S_LOOP   - ループ用の変数を検査し偶数(EVEN)か奇数(ODD)をコンソールに表示するサブルーチンを１０回繰り返します。まとめここでは以下のことが習得できました。1. Unity用ファイルの新規作成方法2. ゲームオブジェクトへ適用方法以上',
	permalink=>'./category2/category5/entry22.html'
);
$searchData[22] = array(
	title=>'&quot;Hello World&quot; Step-by-step チュートリアル',
	contents=>'はじめにStateGoを理解するために一ステップずつ解説するチュートリアルです。定番の『Hello Word』まずは、定番のHello Worldを表示するステートマシンを作成します。準備先の記事【新規作成からサンプルの実行まで】を実践し、Unityのセットアップ及びStateGoの初期サンプル実行に問題がないかを確認下さい。リセットTestControl.psggをダブルクリックして、StateGoを起動します。何もないところから覚えて頂きたいので、メニューバーの[ファイル]から[リセット]を選択して、STARTとENDだけの状態にします。ステート作成STARTステートとENDステートの真ん中あたりで、クリックしてメニューを表示させます。[新規作成]→[ステート]→[汎用(デフォルト)]を選択します。ステートが作成されます。ステート名とコメントステート上でクリックしてメニューを表示します。アイテム編集を選択します。このステートの定義内容がテーブルで表示されます。ステート名を入力したいので、２列目の[ステート]をクリックします。このステートに相応しそうなステート名　[PRINT_HELLO]を入力します。何がしたいのか詳細をコメントに入力します。 "定番のHello Worldを表示"プログラム入力一回だけ表示して、すぐに次のステートに遷移するので、[update]列にプログラムを入力しましょう。 (アイテム名と値についての関連は、解説の『テンプレートと変換について』をお読みください)gameObject.AddComponent().text = "Hello World";矢印の変更STARTステートの左から出てる赤丸をドラッグして、PRINT_HELLOステートの右端の緑丸にドロップします。PRINT_HELLOステートからENDステートへ矢印を追加します。プログラムの確認PRINT_HELLOステートをクリックしてみてください。左のソースパネルに変換結果が表示されます。STARTとENDをクリックすると同様に表示されます。変換左下の [保存と変換]ボタンを押すと変換結果が TestControl.csに出力されます。実行Unityのプレイボタンを押して実行します。まとめここでは以下のことが習得できました。１．ステートを作成する。２．ステート名とコメントを入力する３．プログラムを入力する４．矢印でつなげる５．変換する６．実行する以上',
	permalink=>'./category2/category5/entry23.html'
);
$searchData[23] = array(
	title=>'&quot;分岐サンプル&quot; Step-by-step チュートリアル',
	contents=>'はじめにStateGoを理解して頂くために一ステップずつ解説するチュートリアルです。分岐処理を学習します。プログラム仕様これから作るプログラムの仕様は以下のとおりです。ランダムで１から１０の数字を一つ選択１の場合は"1st"２の場合は"2nd"３の場合は "3rd"４以降は "4th"と表現する。最終的に、 "You are XX." XXの部分に上記で作成した文字列が入る準備このチュートリアルは"Hello World" step-by-step チュートリアルからの続きになります。準備が出来てない場合は、最初の記事から実践して下さい。乱数の取得汎用の新規ステートを作成します。GET_RANDというステート名を与えます。乱数を保持して、以降のステートで使うため、メンバ変数 "m_val" を定義します。既に用意したテーブルの memberに宣言の式を入力します。[member]int m_val = 0;乱数関数 rand( a, b )を後から定義することとして、[update]に式を入力します。[update]m_val = rand(1,10);分岐の作成取得した数字で分岐する必要があります。GET_RANDステートをクリックするとメニューが表示されます。分岐作成を選択します。分岐エディタが表示されます。ダイアログの空欄でクリックしてメニューを表示して、新規の分岐を作成します。分岐条件は、プログラム式を入力します。分岐ダイアログをOKで閉じるとステートに分岐ボックスが追加されます。分岐別の処理分岐それぞれの処理を追加する。1stのステートの [update]に、以下のプログラムをに入力します。var o = new GameObject();o.AddComponent().text = "You are 1st";o.transform.position = Vector3.down;（"Hello World"の表示と重ならないようにしてあります。）以下、同様に。2nd用。var o = new GameObject();o.AddComponent().text = "You are 2nd";o.transform.position = Vector3.down;3rd用。var o = new GameObject();o.AddComponent().text = "You are 3rd";o.transform.position = Vector3.down;4以上。var o = new GameObject();o.AddComponent().text = string.Format("You are {0}th",m_val);o.transform.position = Vector3.down;矢印を下図のように接続します。変換保存と変換ボタンを押し、hoge_control.rsに出力します。rand関数の実装rand関数が実装されていなため、このまま実行はできません。TestContro.csをエディタで開き、rand関数を実装します。ただし、StateGoの挿入部の中に実装すると変換時に削除されます。挿入マーカ―外で実装します。※組込関数で実装することも可能ですが、変換結果の挿入部以外で定義できることを習得することを目的とします。int rand(int x, int y){　　var r = UnityEngine.Random.Range(x,y+1);　　return r;}実行UnityのPlayボタンを何度か実行して、正しくプログラムされていることを確認してください。アーカイブpsgg-unity-tutorialまとめここでは以下のことが習得できました。1. メンバ変数の定義2. 分岐方法3. ファイルを変更しての実装方法以上',
	permalink=>'./category2/category5/entry24.html'
);
$searchData[24] = array(
	title=>'サンプル',
	contents=>'',
	permalink=>'./category6/index.html'
);
$searchData[25] = array(
	title=>'Bash',
	contents=>'Bash サンプル',
	permalink=>'./category6/entry28.html'
);
$searchData[26] = array(
	title=>'C',
	contents=>'C言語サンプル',
	permalink=>'./category6/entry29.html'
);
$searchData[27] = array(
	title=>'C++',
	contents=>'C++サンプル',
	permalink=>'./category6/entry30.html'
);
$searchData[28] = array(
	title=>'C#',
	contents=>'C#サンプル',
	permalink=>'./category6/entry31.html'
);
$searchData[29] = array(
	title=>'Delphi',
	contents=>'Delphiサンプル',
	permalink=>'./category6/entry38.html'
);
$searchData[30] = array(
	title=>'Javascript',
	contents=>'JavascrptサンプルJavascript 15パズル',
	permalink=>'./category6/entry33.html'
);
$searchData[31] = array(
	title=>'PHP',
	contents=>'PHPサンプル',
	permalink=>'./category6/entry41.html'
);
$searchData[32] = array(
	title=>'Python',
	contents=>'Pythonサンプル',
	permalink=>'./category6/entry40.html'
);
$searchData[33] = array(
	title=>'Rust',
	contents=>'Rustサンプル',
	permalink=>'./category6/entry34.html'
);
$searchData[34] = array(
	title=>'Swift',
	contents=>'SWIFTサンプル',
	permalink=>'./category6/entry39.html'
);
$searchData[35] = array(
	title=>'ティラノスクリプト',
	contents=>'ティラノスクリプトサンプル',
	permalink=>'./category6/entry35.html'
);
$searchData[36] = array(
	title=>'Typescript(Anguler)',
	contents=>'Anguler 6 SampleAnguler 8 Sample',
	permalink=>'./category6/entry27.html'
);
$searchData[37] = array(
	title=>'Unity(C#)',
	contents=>'Unity チュートリアルUnity 迷路自動生成Unity メニューサンプルUnity ゲームサンプル『Escape From Mars』Unity シンプルアニメーション',
	permalink=>'./category6/entry26.html'
);
$searchData[38] = array(
	title=>'VBA(Excel)',
	contents=>'VBAサンプル',
	permalink=>'./category6/entry32.html'
);
$searchData[39] = array(
	title=>'Visual Basic',
	contents=>'Visual Basic サンプル',
	permalink=>'./category6/entry36.html'
);
$searchData[40] = array(
	title=>'Windows batch',
	contents=>'Windowsバッチサンプル',
	permalink=>'./category6/entry37.html'
);
$encoding = "SJIS";

?>