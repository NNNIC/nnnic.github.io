<?xml version="1.0"?>
<rss version="2.0">
	<channel>
		<title>ビジュアルプログラミングツール　ＳｔａｔｅＧｏ　（準備中）</title>
		<link>https://statego.programanic.com/v2test/</link>
		<description>ＳｔａｔｅＧｏは、ゲーム開発から生まれた、様々なプログラミング言語に対応できるビジュアルプログラミングツールです。
対応言語：　　　Ｔｙｐｅｓｃｒｉｐｔ（Ａｎｇｕｌｅｒ），　Ｂａｓｈ，　Ｃ，　Ｃ＋＋，　Ｃ＃，　Ｃ＃（Ｕｎｉｔｙ），　ＶＢＡ（Ｅｘｃｅｌ），　Ｊａｖａｓｃｒｉｐｔ，　Ｒｕｓｔ，　ティラノスクリプト，　Ｖｉｓａｕｌ　Ｂａｓｃｉ，　Ｗｉｎ－ｂａｔ，　Ｄｅｌｐｈｉ，　Ｓｗｉｆｔ，　ＰＨＰ</description>
		<language>ja</language>
		<pubDate>Wed, 17 Jun 2020 23:03:44 +0900</pubDate>
		<lastBuildDate>Wed, 17 Jun 2020 23:03:44 +0900</lastBuildDate>
		<item>
			<title>＆ｑｕｏｔ；Ｈｅｌｌｏ　Ｗｏｒｌｄ＆ｑｕｏｔ；　Ｓｔｅｐ－ｂｙ－ｓｔｅｐ　チュートリアル</title>
			<link>https://statego.programanic.com/v2test/category2/category4/entry20.html</link>
			<description><![CDATA[
StateGoを理解して頂くために一ステップずつ解説するチュートリアルです。定番の『Hello Word』まずは、定番のHello Worldを表示するステートマシンを作成します。準備先の記事【サンプルの実行】を実践し、Rustのセットアップ及びStateGoの初期サンプル実行に問題がないかを確認下さい。リセットhoge_control.psggをダブルクリックして、StateGoを起動しましょう。何もないところから覚えて頂きたいので、メニューバーの[ファイル]から[リセット]を選択して、STARTとENDだけの状態にします。ステート作成STARTステートとENDステートの真ん中あたりで、クリックしてメニューを表示させます。[新規作成]→[ステート]→[汎用(デフォルト)]を選択します。ステートが作成されます。ステート名とコメントステート上でクリックしてメニューを表示します。アイテム編集を選択します。このステートの定義内容がテーブルで表示されます。ステート名を入力したいので、２列目の[ステート]をクリックします。このステートに相応しそうなステート名　[PRINT_HELLO]を入力します。何がしたいのか詳細をコメントに入力します。 "定番のHello Worldを表示"プログラム入力一回だけ表示して、すぐに次のステートに遷移するので、[update]列にプログラムを入力しましょう。println!("Hello, World!");矢印の変更STARTステートの左から出てる赤丸をドラッグして、PRINT_HELLOステートの右端の緑丸にドロップします。PRINT_HELLOステートからENDステートへ矢印を追加します。プログラムの確認PRINT_HELLOステートをクリックしてみてください。左のソースパネルに変換結果が表示されます。変換左下の [保存と変換]ボタンを押すと変換結果が hoge_control.rsに出力されます。実行次のコマンドで実行してみましょう。> cargo runサンプルの rand::Rngが警告となるので、削除して実行してください。まとめここでは以下のことが習得できました。１．ステートを作成する。２．ステート名とコメントを入力する３．プログラムを入力する４．矢印でつなげる５．変換する６．実行する以上
			]]></description>
			<pubDate>Mon, 15 Jun 2020 21:16:28 +0900</pubDate>
			<guid isPermaLink="true">https://statego.programanic.com/v2test/category2/category4/entry20.html</guid>
		</item>
		<item>
			<title>＆ｑｕｏｔ；分岐サンプル＆ｑｕｏｔ；　Ｓｔｅｐ－ｂｙ－ｓｔｅｐ　チュートリアル</title>
			<link>https://statego.programanic.com/v2test/category2/category4/entry19.html</link>
			<description><![CDATA[
StateGoを理解して頂くために一ステップずつ解説するチュートリアルです。分岐処理を学習します。プログラム仕様これから作るプログラムの仕様は以下のとおりです。ランダムで１から１０の数字を一つ選択１の場合は"1st"２の場合は"2nd"３の場合は "3rd"４以降は "4th"と表現する。最終的に、 "You are XX." XXの部分に上記で作成した文字列が入る準備このチュートリアルは"Hello World" step-by-step チュートリアルからの続きになります。準備が出来てない場合は、最初の記事から実践して下さい。乱数の取得汎用の新規ステートを作成します。GET_RANDというステート名を与えます。乱数を保持して、以降のステートで使うため、メンバ変数 "m_val" を定義します。Rustでのメンバ変数は、宣言と初期化が別々に行う必要があります。既に用意したテーブルの memberに宣言、member_initに初期化用の式を入力します。[member]m_val : i32,[member_init]m_val : 0,乱数関数 rand( a, b )を後から定義することとして、[init]に式を入力します。[update]self.m_val = rand(1,10);分岐の作成取得した数字で分岐する必要があります。GET_RANDステートをクリックするとメニューが表示されます。分岐作成を選択します。分岐エディタが表示されます。ダイアログの空欄でクリックしてメニューを表示して、新規の分岐を作成します。分岐条件は、プログラム式を入力します。分岐ダイアログをOKで閉じるとステートに分岐ボックスが追加されます。分岐別の処理分岐それぞれ用の処理を追加する。変換保存と変換ボタンを押し、hoge_control.rsに出力します。rand関数の実装rand関数が実装されていなため、このまま実行はできません。hoge_control.rsをエディタで開き、rand関数を実装します。ただし、StateGoの挿入部の中に実装すると変換時に削除されます。挿入マーカ―外で実装します。※組込関数で実装することも可能ですが、変換結果の挿入部以外で定義できることを習得することを目的とします。fn rand(a: i32, b:  i32) -> i32 {　　let mut rng = rand::thread_rng();　　let n = b - a;　　return a + rng.gen_range(0,n+1);}使用するパッケージを指定します。use rand::Rng;実行以下のコマンドを何度か実行して、正しくプログラムされていることを確認してください。> cargo runアーカイブpsgg-rust-sample/tutorialまとめここでは以下のことが習得できました。1. メンバ変数の定義と初期化2. 分岐方法3. ファイルを変更しての実装方法以上
			]]></description>
			<pubDate>Mon, 15 Jun 2020 08:44:05 +0900</pubDate>
			<guid isPermaLink="true">https://statego.programanic.com/v2test/category2/category4/entry19.html</guid>
		</item>
		<item>
			<title>新規作成からサンプル実行まで</title>
			<link>https://statego.programanic.com/v2test/category2/category4/entry18.html</link>
			<description><![CDATA[
Rust用の新規ステートマシンを作成した時のサンプルを動かす方法を紹介します。サンプルでは、LoopやGosub機能が使われています。StatGoを始めて使う方にはちょっと難しい内容となっています。そういう方は、環境整備と実行確認のみに使用して下さい。Rustサンプル用の作業フォルダの作成あらかじめ、Rustの環境をセットアップしてださい。コマンドラインにて テスト用 Hogeパッケージを作成します。> cargo new hogemain.rsが作成されます。StateGoの新規作成１．StateGoを起動２．スタートダイアログの新規作成ボタンを押す３．ステートキットからRustを選択４．ステートマシン名をhoge_controlに決定　　rustの命名則に従うためスネル形式にします５．main.rsと同じフォルダを指定５．生成ボタンを押す以下の２つのファイルが生成されます。hoge_control.psgg --- StateGoデータファイルhoge_control.rs    --- 出力用のRustソースファイル生成時のサンプルを動かす生成時のサンプルを動かします。(このサンプルはループとサブルーチン呼出しのサンプルです。)1. Cargo.tomlに以下を書き足します。※以下の内容はヘルプパネルにも記載されています。[dependencies]rand = "0.6"2. main.rsを以下のように編集します※以下の内容はヘルプパネルにも記載されています。#[allow(dead_code)]mod hoge_control;use hoge_control::hoge_control::*;    fn main() {　　let mut hc = HogeControl::new();　　hc.run();}3. 実行します。コマンドラインにて以下を入力します。> cargo runビデオ一連の操作をキャプチャしたものです。サンプル動作説明※高度な内容が含まれています。理解が難しい場合、次の"Step-by-step"チュートリアルにお進みください。サンプルは、GOSUBとLOOPを使用しています。GOUSBは、サブルーチンを呼び出します。サブルーチンは、サブルーチン開始用のステートとリターン用のステートから成り立ちます。LOOPは、初期値、条件、再初期化を指定してサブルーチンを呼出します。フローについて１．　ステート【0001】　    StateGo is runningの表示２．  ステート【LOP000】  SBS001のサブルーチンを10回呼出し３．  ステート【GSB001】  SBS000のサブルーチン呼出し(1回)４．  ステート【0002】      ステート内で１０回Update待ち５．  ステート【0003】      乱数を発生させ、奇数偶数で分岐組込部分右下に、乱数発生の関数を組込ステートで定義してあります。【E_0000】 rand関数の実装コメント右上に、本サンプルの説明がコメントで定義していあります。【C_0000】 説明
			]]></description>
			<pubDate>Mon, 15 Jun 2020 08:43:14 +0900</pubDate>
			<guid isPermaLink="true">https://statego.programanic.com/v2test/category2/category4/entry18.html</guid>
		</item>
		<item>
			<title>ＬＯＯＰとＧＯＳＵＢ</title>
			<link>https://statego.programanic.com/v2test/category3/entry17.html</link>
			<description><![CDATA[
LOOPステートを繰り返すための機能としてLOOPがあります。ステート作成にて、LOOPを選択することで作成されます。Gosubにてサブルーチンを呼出します。LOOPには、初期化、条件、再初期化を指定して利用します。ステートを使うほどもない繰り返しは、通常のステートの中でプログラムで作り込みができます。ループを作る必要性を確認して使用しましょう。GOSUB何度も同じステートを呼び出すためにあるがのGOSUBです。サブルーチンは専用の開始と終了ステートがあります。
			]]></description>
			<pubDate>Mon, 15 Jun 2020 08:00:29 +0900</pubDate>
			<guid isPermaLink="true">https://statego.programanic.com/v2test/category3/entry17.html</guid>
		</item>
		<item>
			<title>Ｖｉｓｕａｌ　Ｓｔｕｄｉｏ　Ｃｏｄｅとの連携</title>
			<link>https://statego.programanic.com/v2test/category3/entry16.html</link>
			<description><![CDATA[
IDEとStateGoの連携は、作業効率を驚くほど上げることが出来ます。StateGoからソースコードの該当ステートの変換場所へ。ソースコードからStateGoファイルを検索して開く。StateGoのアイテム編集時にIDEのソースコードを開き編集する。以上のことが可能です。 参考　https://qiita.coVののVSVからm/standard-software/items/785e3c27865a8e8d0b92
			]]></description>
			<pubDate>Sat, 13 Jun 2020 12:34:17 +0900</pubDate>
			<guid isPermaLink="true">https://statego.programanic.com/v2test/category3/entry16.html</guid>
		</item>
	</channel>
</rss>
